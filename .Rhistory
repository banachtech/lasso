c( "i love R", "R is magic") %>% as_tibble_col(column_name = "text") %>% rownames_to_column("line") %>% unnest_tokens(output = word, input = text) %>% anti_join(stop_words, by = "word")
install.packages("janeaustenr")
c( "i love R", "R is magic") %>% as_tibble(column_name = "text") %>% rownames_to_column("line") %>% unnest_tokens(output = word, input = text) %>% anti_join(stop_words, by = "word")
library(knitr)
c( "i love R", "R is magic") %>% as_tibble(column_name = "text") %>% rownames_to_column("line") %>% unnest_tokens(output = word, input = text) %>% anti_join(stop_words, by = "word")
library(tidyr)
library(tibble)
c( "i love R", "R is magic") %>% as_tibble(column_name = "text") %>% rownames_to_column("line") %>% unnest_tokens(output = word, input = text) %>% anti_join(stop_words, by = "word")
remove.packages("rstan")
install.packages("rstan", type = "source")
library(rstan)
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
library(RcppParallel)
remove.packages("Rcpp")
detach("package:base", unload = TRUE)
library(base)
detach("package:RcppArmadillo", unload = TRUE)
detach("package:RcppEigen", unload = TRUE)
detach("package:RcppParallel", unload = TRUE)
remove.packages("RcppEigen", "RcppParallel", "RcppArmadillo")
remove.packages(c("RcppEigen", "RcppParallel", "RcppArmadillo"))
remove.packages("rstan")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("Rcpp")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
install.packages("rstan")
library(stochvol)
data(exrates)
y <- log(exrates$USD)
y <- diff(y)
y <- y - mean(y)
library(rstan)
fit("sv.stan", data = list(N=length(y), y = y), iter = 100, chains = 1)
fit <- stan("sv.stan", data = list(N=length(y), y = y), iter = 100, chains = 1)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
y <- rnorm(0, 1)
y <- rnorm(0, 1, 100)
y
?rnorm
y <- rnorm(100, 0, 1)
fit <- stan('test.stan', list(N = 100, y = y)
)
pkgbuild::has_build_tools(debug = TRUE)
packageVersion("StanHeaders")
library(rstan)
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
version
install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
install.packages("rstan", type = "source")
version
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18)
)
pwd()
getwd()
fit <- stan(file = "~/Research/R/school.stan", data = schools_dat)
fit <- stan(file = "~/Research/R/schools.stan", data = schools_dat)
source('~/Research/R/schools.R')
A = 0.8
C = -2.5
sigma_x = 0.20
sigma_y = 0.10
N = 500
x = sigma_x * rnorm(N)
x[-1] = x[-1] + A * x[-N]
y = C * x + sigma_y * rnorm(N)
plot(y)
kalman_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/kalman.stan", data = kalman_dat)
fit <- stan(file = "~/Research/R/kalman.stan", data = kalman_dat)
fit <- stan(file = "~/Research/R/kalman.stan", data = kalman_dat)
print(fit)
mu = -1.5
sigma = 0.4
phi = 0.80
N = 500
h = sigma * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (x[-N] - mu)
y = exp(0.5*h) * rnorm(N)
plot(y)
summary(y)
density(y)
hist(y)
sv_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/sv.stan", data = sv_dat)
print(fit)
out <- extract(fit, c("mu", "phi", "sigma"))
out$mu
print(fit, pars = c("mu", "phi", "sigma"))
traceplot(fit, pars = c("mu", "phi", "sigma"), inc_warmup = FALSE)
mu = -1.5
sigma = 0.4
phi = 0.80
N = 1000
h = sigma * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu)
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/sv.stan", data = sv_dat)
print(fit, pars = c("mu", "phi", "sigma"))
mu = -1.5
sigma = 0.4
phi = 0.80
N = 1000
h = sigma * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu)
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/sv.stan", data = sv_dat)
mu = -1.5
sigma = 0.4
phi = 0.80
N = 1000
rho = -0.2
h = sigma * sqrt(1-rho*rho) * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/sv_corr.stan", data = sv_dat)
fit <- stan(file = "~/Research/R/sv_corr.stan", data = sv_dat)
print(fit, pars = c("mu", "theta", "sigma", "rho"))
?stan
mu = -1.5
sigma = 0.4
phi = 0.80
N = 500
rho = -0.2
h = sigma * sqrt(1-rho*rho) * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
length(h[-N])
exp(-0.5*h[-N])
y[-N] * exp(-0.5*h[-N])
rho * sigma * y[-N] * exp(-0.5*h[-N])
phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
h[-1] + phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
h = sigma * sqrt(1-rho*rho) * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
fit <- stan(file = "~/Research/R/sv_corr.stan", data = sv_dat, iter = 10000)
print(fit, pars = c("mu", "theta", "sigma", "rho"))
mu = 0.01
sigma = 0.4
theta = 0.16
kappa = 2.0
N = 500
rho = -0.5
s1 = sigma * sqrt(1-rho*rho)
s2 = sigma * rho
h =  s1 * rnorm(N)
y = rnorm(N)
h[1] = theta
y[1] = mu - 0.5 * theta
for (t in 2:N) {
v = sqrt(max(0.0001, h[t-1]))
y[t] = mu - 0.5 * h[t-1] + v * y[t]
h[t] = v * h[t] + h[t-1] + kappa * (theta - h[t-1]) + s2 * (y[t] - mu + 0.5 * h[t-1]) / v
}
sv_dat <- list(N = N, y = y)
plot(y)
plot(h)
mu = 0
sigma = 0.4
theta = 0.16
kappa = 2.0
N = 500
rho = -0.2
s1 = sigma * sqrt(1-rho*rho)
s2 = sigma * rho
h =  s1 * rnorm(N)
y = rnorm(N)
h[1] = theta
y[1] = mu - 0.5 * theta
for (t in 2:N) {
v = sqrt(max(0.0001, h[t-1]))
y[t] = mu - 0.5 * h[t-1] + v * y[t]
h[t] = v * h[t] + h[t-1] + kappa * (theta - h[t-1]) + s2 * (y[t] - mu + 0.5 * h[t-1]) / v
}
sv_dat <- list(N = N, y = y)
plot(y)
plot(h)
fit <- stan(file = "~/Research/R/heston_corr.stan", data = sv_dat, iter = 10000)
fit <- stan(file = "~/Research/R/heston_corr.stan", data = sv_dat, iter = 10000)
fit <- stan(file = "~/Research/R/heston_corr.stan", data = sv_dat, iter = 10000)
print(fit, pars = c("mu", "theta", "sigma", "rho", "kappa"))
mu = -1.5
sigma = 0.4
phi = 0.80
N = 1000
rho = -0.2
h = sigma * sqrt(1-rho*rho) * rnorm(N)
h[1] = h[1] / sqrt(1 - phi * phi)
h = h + mu
h[-1] = h[-1] + phi * (h[-N] - mu) + rho * sigma * y[-N] * exp(-0.5*h[-N])
y = exp(0.5*h) * rnorm(N)
sv_dat <- list(N = N, y = y)
plot(y)
fit <- stan(file = "~/Research/R/sv_corr.stan", data = sv_dat, iter = 10000)
print(fit, pars = c("mu", "theta", "sigma", "rho"))
?is.matrix
x = 2
is.matrix(x)
seq(1, 53, 12)
804/12
807/12
807 % 12
807 %% 12
install.packages(c("bookdown", "ctv", "markdown"))
data = read.csv("/users/balaji/research/R/data_15sep/data_fin.csv")
head(data)
library(rstan)
library(gdata)
library(xts)
library(lubridate)
filename <- '~/projects/ito/data/btc_30min.csv'
dat <- read.csv(file = filename, header = TRUE)
dat$btc
x = dat$btc
is.nan(x)
su
sum(is.nan(x))
x = x[!is.nan(x)]
sum(is.nan(x))
p <- xts(dat[,2:NCOL(dat)], order.by = ymd_hms(dat[,1]))
top(p)
View(p)
p$btc
plot(p$btc)
y = zeros(N)
# generate fake data
alpha = 0.5
beta = 0.7
N = 1000
y = rep(0.001,N)
h = rep(0,N)
for (k in 2:N) {
h[k] = beta * h[k-1] + alpha * y[t-1]^2
y[k] = rnorm(0, h[k])
}
h[k] = beta * h[k-1] + alpha * y[k-1]^2
for (k in 2:N) {
h[k] = beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(0, h[k])
}
rnorm(0, h[1])
rnorm(0, 0.001)
rnorm(0, 1)
rnorm(0, 10)
for (k in 2:N) {
h[k] = beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(1, 0, h[k])
}
plot(y)
plot(cumsum(y))
y = rep(0.0,N)
h = rep(0.01,N)
for (k in 2:N) {
h[k] = beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(1, 0, h[k])
}
plot(cumsum(y))
# generate fake data
alpha = 0.3
beta = 0.7
N = 1000
y = rep(0.0,N)
h = rep(0.01,N)
for (k in 2:N) {
h[k] = beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(1, 0, h[k])
}
mcdat <- list(N = N, y = y)
fit <- stan(file = "~/projects/ito/src/garchzd.stan", data = mcdat, iter = 1000)
fit <- stan(file = "~/projects/ito/src/garchzd.stan", data = mcdat, iter = 1000)
print(fit)
print(fit, "alpha")
print(fit, c("alpha","beta"), probs=c(0.025,0.975))
fit <- stan(file = "~/projects/ito/src/garchzd.stan", data = mcdat, iter = 10000)
print(fit, c("alpha","beta"), probs=c(0.025,0.975))
x
length(x)
# generate fake data
function <- garch(alpha, beta, omega, N=1000, h0 = 0.001, y0 = 0.001) {
y = rep(y0,N)
h = rep(h0,N)
for (k in 2:N) {
h[k] = omega + beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(1, 0, h[k])
}
return(y)
}
# generate fake data
garch <- function(alpha, beta, omega, N=1000, h0 = 0.001, y0 = 0.001) {
y = rep(y0,N)
h = rep(h0,N)
for (k in 2:N) {
h[k] = omega + beta * h[k-1] + alpha * y[k-1]^2
y[k] = rnorm(1, 0, h[k])
}
return(y)
}
x <- dat$btc
x <- x[!is.nan(x)]
N = 5000
x[1:N]
mcdat <- list(N = N, y = x[1:N])
x <- x - mean(x)
x <- dat$btc
x <- diff(log(x[!is.nan(x)]))
x <- x - mean(x)
N = 5000
mcdat <- list(N = N, y = x[1:N])
fit <- stan(file = "~/projects/ito/src/garchzd.stan", data = mcdat, iter = 10000)
print(fit, pars = c("omega", "alpha", "beta"), probs=c(0.025, 0.975))
print(fit, pars = c("alpha", "beta"), probs=c(0.025, 0.975))
rebuild_cmdstan()
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4))
.1 == .3/3
seq(0,1,.3)
seq(0,1,.3) == .3
install.packages(c("cmdstanr", "posterior", "bayesplot"))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstan_path()
library(cmdstanr)
cmdstan_path()
set_cmdstan_path(/Users/balaji/cmdstan)
set_cmdstan_path("/Users/balaji/cmdstan")
cmdstan_path()
cmdstan_version()
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
rebuild_cmdstan()
file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
mod <- cmdstan_model(file)
mod$print()
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500
)
fit$summary()
library(rstan)
library(gdata)
library(xts)
library(lubridate)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
filename <- '~/projects/ito/data/btc_30min.csv'
dat <- read.csv(file = filename, header = TRUE)
p <- xts(dat[,2:NCOL(dat)], order.by = ymd_hms(dat[,1]))
x <- dat$btc
x <- diff(log(x[!is.nan(x)]))
x <- x - mean(x)
N = 5000
msmdat <- list(N = N, y = x[1:N], kbar = 4)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
mod$print()
mod <- cmdstan_model("/users/balaji/projects/ito/src/msm.stan")
mod <- cmdstan_model("/users/balaji/projects/ito/src/msm.stan")
mod <- cmdstan_model("/users/balaji/projects/ito/src/msm.stan")
mod <- cmdstan_model("/users/balaji/projects/ito/src/msm.stan")
mod <- cmdstan_model("/users/balaji/projects/ito/src/msm.stan")
library(rstan)
library(gdata)
library(xts)
library(lubridate)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#source BTC data
filename <- '~/projects/ito/data/btc_30min.csv'
dat <- read.csv(file = filename, header = TRUE)
p <- xts(dat[,2:NCOL(dat)], order.by = ymd_hms(dat[,1]))
x <- dat$btc
x <- diff(log(x[!is.nan(x)]))
x <- x - mean(x)
N = 1000
mcdat <- list(N = N, y = x[1:N])
1:16
msmdat <- list(N = N, y = x[1:N], kbar = 4, idx = 1:16)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
rmultinom(10, 15, 1/15)
rmultinom(10, 15, 1/15)
rmultinom(10, 15, rep(1/15,15))
sample(0:15, 10, replace=TRUE)
kbar = 4
N = 1000
nstates = 2^kbar
0:nstates-1
msmdat <- list(N = N, y = x[1:N], kbar = kbar, nstates = nstates, idx = sample(0:nstates-1,N,replace=TRUE))
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
library(rstan)
library(gdata)
library(xts)
library(lubridate)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
filename <- '~/projects/ito/data/btc_30min.csv'
dat <- read.csv(file = filename, header = TRUE)
p <- xts(dat[,2:NCOL(dat)], order.by = ymd_hms(dat[,1]))
x <- dat$btc
x <- diff(log(x[!is.nan(x)]))
x <- x - mean(x)
kbar = 4
N = 1000
nstates = 2^kbar
msmdat <- list(N = N, y = x[1:N], kbar = kbar, nstates = nstates, idx = sample(0:nstates-1,N,replace=TRUE))
msmfit <- stan(file = "~/projects/ito/src/msm.stan", data = msmdat, iter = 1000)
install.packages("ElemStatLearn")
install.packages("ncvreg")
data(prostate)
library(ncvreg)
data(prostate)
x <- data(prostate)
x
x <- data(Prostate)
x
data(Prostate)
Prostate$X
write.csv(Prostate$x, "users/balaji/projects/lasso/X.csv")
write.csv(Prostate$x, "/users/balaji/projects/lasso/X.csv")
write.csv(Prostate$x, "/users/balaji/projects/lasso/X.csv", row.names = FALSE)
write.csv(Prostate$y, "/users/balaji/projects/lasso/y.csv", row.names = FALSE)
Prostate$x
Prostate$X
write.csv(Prostate$X, "/users/balaji/projects/lasso/X.csv", row.names = FALSE)
install.packages("glmnet")
pwd
pwd()
getwd()
setwd("/Users/balaji/projects/lasso")
getwd()
library(glmnet)
X <- read.csv("X.csv")
y <- read.csv("y.csv")
rm(list=ls())
library(glmnet)
X <- read.csv("X.csv")
y <- read.csv("y.csv")
res <- glmnet(X,y)
X
dat <- data("QuickStartExample")
x <- dat$x
dat <- data(QuickStartExample)
x <- dat$x
data(QuickStartExample)
x <- QuickStartExample$x
x
y <- QuickStartExample$y
res <- glmnet(x,y)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
